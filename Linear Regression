import pickle
import numpy as np
from sklearn import linear_model
import sklearn.metrics as sm
import matplotlib.pyplot as plt
from matplotlib import style
import pandas as pd
style.use("ggplot")



Input_file = "Single_data_value.txt"
data = np.loadtxt(Input_file, delimiter=",")

X,Y =data[:,:-1], data[:,-1]
print(X, Y)

num_training = int(0.8*len(X))
num_test = len(X) - num_training

# Training data
X_train, Y_train = X[:num_training], Y[:num_training]

# Test data
X_test, y_test = X[num_training:], Y[num_training:]
print(X_test)
# print(X_train, Y_train)

# Create linear regressor object
regressor = linear_model.LinearRegression()

# Train the model using the training sets
regressor.fit(X_train, Y_train)


# Predict the output
y_test_pred = regressor.predict(X_test)
my_pre = regressor.predict([[8]])
print("\n",my_pre)


plt.scatter(X_test, y_test, color='green')
plt.plot(X_test, y_test_pred, color='black', linewidth=4)
plt.title("Linear Regression")
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")
plt.show()

# Model persistence
output_model_file = 'model.pkl'
# Save the model
with open(output_model_file, 'wb') as f:
    pickle.dump(regressor, f)

# Load the model
with open(output_model_file, 'rb') as f:
    regressor_model = pickle.load(f)

# Perform prediction on test data
y_test_pred_new = regressor_model.predict(X_test)
print("\nNew mean absolute error =", round(sm.mean_absolute_error(y_test, y_test_pred_new), 2))
print("\nR2 Score:",round(sm.r2_score(y_test,y_test_pred_new)))
