import numpy as np
from sklearn import preprocessing
import pandas as pd

# let's define the sample data

input_data = np.array([[5.1, -2.9, 3.3],
                       [-1.2, 7.8, -6.1],
                       [3.9, 0.4, 2.1],
                       [7.3, -9.9, -4.5]])

# Binarize the data on thersold value of 2.1

data_binzarized = preprocessing.Binarizer(threshold=2.1).transform(input_data)
print("\nBinarized data:\n", data_binzarized)

# print mean and standard devaition
print("\nBefore: ")
print("Mean =", input_data.mean(axis=0))
print("std devaition = ", input_data.std(axis =0))

# Remove mean
data_scaled = preprocessing.scale(input_data)
print("\nAfter")
print("mean = ",data_scaled.mean(axis =0))
print("std deviation=", data_scaled.std(axis =0))

# min and max scaling
data_scaler_minmax = preprocessing.MinMaxScaler(feature_range=(0,1))
data_scaled_minmax = data_scaler_minmax.fit_transform(input_data)
print("\nMin max scaled data:\n", data_scaled_minmax)

data_normalized_l1 = preprocessing.normalize(input_data, norm='l1')
data_normalized_l2 = preprocessing.normalize(input_data, norm='l2')

print("\nL1 normalized data:\n", data_normalized_l1)
print("\nL2 normalized data:\n", data_normalized_l2) 

## Encoding and Decoding
import numpy as np
from sklearn import preprocessing

# define some labels
input_labels = ['red', 'black', 'red','green', 'black', 'yellow','white']

# Create label encoder and fit the labels
encoder = preprocessing.LabelEncoder()
encoder.fit(input_labels)

# print the mapping
print("\nLabel mapping:")
for i,item in enumerate(encoder.classes_):
    print(item, '-->' ,i)

# Encode a set of labels using the encoder
test_labels = ['green','red','black']
encoded_values = encoder.transform(test_labels)
print("\nLabels =",test_labels)
print("Encoded values=",list(encoded_values))

# Decode a set of values using the encoder
